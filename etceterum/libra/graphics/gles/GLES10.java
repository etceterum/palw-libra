package etceterum.libra.graphics.gles;

import java.nio.Buffer;
import java.nio.FloatBuffer;
import java.nio.IntBuffer;

//converted from:
//http://www.jarvana.com/jarvana/view/org/khronos/opengl-api/gl1.1-android-2.1_r1/opengl-api-gl1.1-android-2.1_r1-sources.jar!/javax/microedition/khronos/opengles/GL10.java?format=ok
public interface GLES10 {
    void glActiveTexture(int texture);
    void glAlphaFunc(int func, float ref);
    //void glAlphaFuncx(int func, int ref);
    void glBindTexture(int target, int texture);
    void glBlendFunc(int sfactor, int dfactor);
    void glClear(int mask);
    void glClearColor(float red, float green, float blue, float alpha);
    //void glClearColorx(int red, int green, int blue, int alpha);
    void glClearDepthf(float depth);
    //void glClearDepthx(int depth);
    void glClearStencil(int s);
    void glClientActiveTexture(int texture);
    void glColor4f(float red, float green, float blue, float alpha);
    //void glColor4x(int red, int green, int blue, int alpha);
    void glColorMask(boolean red, boolean green, boolean blue, boolean alpha);
    void glColorPointer(int size, int type, int stride, Buffer pointer);
    void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, Buffer data);
    void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, Buffer data);
    void glCopyTexImage2D(int target, int level, int internalformat, int x, int y, int width, int height, int border);
    void glCopyTexSubImage2D(int target, int level, int xoffset, int yoffset, int x, int y, int width, int height);
    void glCullFace(int mode);
    void glDeleteTextures(int n, int[] textures, int offset);
    void glDeleteTextures(int n, IntBuffer textures);
    void glDepthFunc(int func);
    void glDepthMask(boolean flag);
    void glDepthRangef(float zNear, float zFar);
    //void glDepthRangex(int zNear, int zFar);
    void glDisable(int cap);
    void glDisableClientState(int array);
    void glDrawArrays(int mode, int first, int count);
    void glDrawElements(int mode, int count, int type, Buffer indices);
    void glEnable(int cap);
    void glEnableClientState(int array);
    void glFinish();
    void glFlush();
    void glFogf(int pname, float param);
    void glFogfv(int pname, float[] params, int offset);
    void glFogfv(int pname, FloatBuffer params);
    //void glFogx(int pname, int param);
    //void glFogxv(int pname, int[] params, int offset);
    //void glFogxv(int pname, IntBuffer params);
    void glFrontFace(int mode);
    void glFrustumf(float left, float right, float bottom, float top, float zNear, float zFar);
    //void glFrustumx(int left, int right, int bottom, int top, int zNear, int zFar);
    void glGenTextures(int n, int[] textures, int offset);
    void glGenTextures(int n, IntBuffer textures);
    int glGetError();
    void glGetIntegerv(int pname, int[] params, int offset);
    void glGetIntegerv(int pname, IntBuffer params);
    String glGetString(int name);
    void glHint(int target, int mode);
    void glLightModelf(int pname, float param);
    void glLightModelfv(int pname, float[] params, int offset);
    void glLightModelfv(int pname, FloatBuffer params);
    //void glLightModelx(int pname, int param);
    //void glLightModelxv(int pname, int[] params, int offset);
    //void glLightModelxv(int pname, IntBuffer params);
    void glLightf(int light, int pname, float param);
    void glLightfv(int light, int pname, float[] params, int offset);
    void glLightfv(int light, int pname, FloatBuffer params);
    //void glLightx(int light, int pname, int param);
    //void glLightxv(int light, int pname, int[] params, int offset);
    //void glLightxv(int light, int pname, IntBuffer params);
    void glLineWidth(float width);
    //void glLineWidthx(int width);
    void glLoadIdentity();
    void glLoadMatrixf(float[] m, int offset);
    void glLoadMatrixf(FloatBuffer m);
    //void glLoadMatrixx(int[] m, int offset);
    //void glLoadMatrixx(IntBuffer m);
    void glLogicOp(int opcode);
    void glMaterialf(int face, int pname, float param);
    void glMaterialfv(int face, int pname, float[] params, int offset);
    void glMaterialfv(int face, int pname, FloatBuffer params);
    //void glMaterialx(int face, int pname, int param);
    //void glMaterialxv(int face, int pname, int[] params, int offset);
    //void glMaterialxv(int face, int pname, IntBuffer params);
    void glMatrixMode(int mode);
    void glMultMatrixf(float[] m, int offset);
    void glMultMatrixf(FloatBuffer m);
    //void glMultMatrixx(int[] m, int offset);
    //void glMultMatrixx(IntBuffer m);
    void glMultiTexCoord4f(int target, float s, float t, float r, float q);
    //void glMultiTexCoord4x(int target, int s, int t, int r, int q);
    void glNormal3f(float nx, float ny, float nz);
    //void glNormal3x(int nx, int ny, int nz);
    void glNormalPointer(int type, int stride, Buffer pointer);
    void glOrthof(float left, float right, float bottom, float top, float zNear, float zFar);
    //void glOrthox(int left, int right, int bottom, int top, int zNear, int zFar);
    void glPixelStorei(int pname, int param);
    void glPointSize(float size);
    //void glPointSizex(int size);
    void glPolygonOffset(float factor, float units);
    //void glPolygonOffsetx(int factor, int units);
    void glPopMatrix();
    void glPushMatrix();
    void glReadPixels(int x, int y, int width, int height, int format, int type, Buffer pixels);
    void glRotatef(float angle, float x, float y, float z);
    //void glRotatex(int angle, int x, int y, int z);
    void glSampleCoverage(float value, boolean invert);
    //void glSampleCoveragex(int value, boolean invert);
    void glScalef(float x, float y, float z);
    //void glScalex(int x, int y, int z);
    void glScissor(int x, int y, int width, int height);
    void glShadeModel(int mode);
    void glStencilFunc(int func, int ref, int mask);
    void glStencilMask(int mask);
    void glStencilOp(int fail, int zfail, int zpass);
    void glTexCoordPointer(int size, int type, int stride, Buffer pointer);
    void glTexEnvf(int target, int pname, float param);
    void glTexEnvfv(int target, int pname, float[] params, int offset);
    void glTexEnvfv(int target, int pname, FloatBuffer params);
    //void glTexEnvx(int target, int pname, int param);
    //void glTexEnvxv(int target, int pname, int[] params, int offset);
    //void glTexEnvxv(int target, int pname, IntBuffer params);
    void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, Buffer pixels);
    void glTexParameterf(int target, int pname, float param);
    //void glTexParameterx(int target, int pname, int param);
    void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, Buffer pixels);
    void glTranslatef(float x, float y, float z);
    //void glTranslatex(int x, int y, int z);
    void glVertexPointer(int size, int type, int stride, Buffer pointer);
    void glViewport(int x, int y, int width, int height);
    
    int GL_ADD();
    int GL_ALIASED_LINE_WIDTH_RANGE();
    int GL_ALIASED_POINT_SIZE_RANGE();
    int GL_ALPHA();
    int GL_ALPHA_BITS();
    int GL_ALPHA_TEST();
    int GL_ALWAYS();
    int GL_AMBIENT();
    int GL_AMBIENT_AND_DIFFUSE();
    int GL_AND();
    int GL_AND_INVERTED();
    int GL_AND_REVERSE();
    int GL_BACK();
    int GL_BLEND();
    int GL_BLUE_BITS();
    int GL_BYTE();
    int GL_CCW();
    int GL_CLAMP_TO_EDGE();
    int GL_CLEAR();
    int GL_COLOR_ARRAY();
    int GL_COLOR_BUFFER_BIT();
    int GL_COLOR_LOGIC_OP();
    int GL_COLOR_MATERIAL();
    int GL_COMPRESSED_TEXTURE_FORMATS();
    int GL_CONSTANT_ATTENUATION();
    int GL_COPY();
    int GL_COPY_INVERTED();
    int GL_CULL_FACE();
    int GL_CW();
    int GL_DECAL();
    int GL_DECR();
    int GL_DEPTH_BITS();
    int GL_DEPTH_BUFFER_BIT();
    int GL_DEPTH_TEST();
    int GL_DIFFUSE();
    int GL_DITHER();
    int GL_DONT_CARE();
    int GL_DST_ALPHA();
    int GL_DST_COLOR();
    int GL_EMISSION();
    int GL_EQUAL();
    int GL_EQUIV();
    int GL_EXP();
    int GL_EXP2();
    int GL_EXTENSIONS();
    int GL_FALSE();
    int GL_FASTEST();
    //int GL_FIXED();
    int GL_FLAT();
    int GL_FLOAT();
    int GL_FOG();
    int GL_FOG_COLOR();
    int GL_FOG_DENSITY();
    int GL_FOG_END();
    int GL_FOG_HINT();
    int GL_FOG_MODE();
    int GL_FOG_START();
    int GL_FRONT();
    int GL_FRONT_AND_BACK();
    int GL_GEQUAL();
    int GL_GREATER();
    int GL_GREEN_BITS();
    int GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES();
    int GL_IMPLEMENTATION_COLOR_READ_TYPE_OES();
    int GL_INCR();
    int GL_INVALID_ENUM();
    int GL_INVALID_OPERATION();
    int GL_INVALID_VALUE();
    int GL_INVERT();
    int GL_KEEP();
    int GL_LEQUAL();
    int GL_LESS();
    int GL_LIGHT_MODEL_AMBIENT();
    int GL_LIGHT_MODEL_TWO_SIDE();
    int GL_LIGHT0();
    int GL_LIGHT1();
    int GL_LIGHT2();
    int GL_LIGHT3();
    int GL_LIGHT4();
    int GL_LIGHT5();
    int GL_LIGHT6();
    int GL_LIGHT7();
    int GL_LIGHTING();
    int GL_LINE_LOOP();
    int GL_LINE_SMOOTH();
    int GL_LINE_SMOOTH_HINT();
    int GL_LINE_STRIP();
    int GL_LINEAR();
    int GL_LINEAR_ATTENUATION();
    int GL_LINEAR_MIPMAP_LINEAR();
    int GL_LINEAR_MIPMAP_NEAREST();
    int GL_LINES();
    int GL_LUMINANCE();
    int GL_LUMINANCE_ALPHA();
    int GL_MAX_ELEMENTS_INDICES();
    int GL_MAX_ELEMENTS_VERTICES();
    int GL_MAX_LIGHTS();
    int GL_MAX_MODELVIEW_STACK_DEPTH();
    int GL_MAX_PROJECTION_STACK_DEPTH();
    int GL_MAX_TEXTURE_SIZE();
    int GL_MAX_TEXTURE_STACK_DEPTH();
    int GL_MAX_TEXTURE_UNITS();
    int GL_MAX_VIEWPORT_DIMS();
    int GL_MODELVIEW();
    int GL_MODULATE();
    int GL_MULTISAMPLE();
    int GL_NAND();
    int GL_NEAREST();
    int GL_NEAREST_MIPMAP_LINEAR();
    int GL_NEAREST_MIPMAP_NEAREST();
    int GL_NEVER();
    int GL_NICEST();
    int GL_NO_ERROR();
    int GL_NOOP();
    int GL_NOR();
    int GL_NORMAL_ARRAY();
    int GL_NORMALIZE();
    int GL_NOTEQUAL();
    int GL_NUM_COMPRESSED_TEXTURE_FORMATS();
    int GL_ONE();
    int GL_ONE_MINUS_DST_ALPHA();
    int GL_ONE_MINUS_DST_COLOR();
    int GL_ONE_MINUS_SRC_ALPHA();
    int GL_ONE_MINUS_SRC_COLOR();
    int GL_OR();
    int GL_OR_INVERTED();
    int GL_OR_REVERSE();
    int GL_OUT_OF_MEMORY();
    int GL_PACK_ALIGNMENT();
    //int GL_PALETTE4_R5_G6_B5_OES();
    //int GL_PALETTE4_RGB5_A1_OES();
    //int GL_PALETTE4_RGB8_OES();
    //int GL_PALETTE4_RGBA4_OES();
    //int GL_PALETTE4_RGBA8_OES();
    //int GL_PALETTE8_R5_G6_B5_OES();
    //int GL_PALETTE8_RGB5_A1_OES();
    //int GL_PALETTE8_RGB8_OES();
    //int GL_PALETTE8_RGBA4_OES();
    //int GL_PALETTE8_RGBA8_OES();
    int GL_PERSPECTIVE_CORRECTION_HINT();
    int GL_POINT_SMOOTH();
    int GL_POINT_SMOOTH_HINT();
    int GL_POINTS();
    int GL_POINT_FADE_THRESHOLD_SIZE();
    int GL_POINT_SIZE();
    int GL_POLYGON_OFFSET_FILL();
    int GL_POLYGON_SMOOTH_HINT();
    int GL_POSITION();
    int GL_PROJECTION();
    int GL_QUADRATIC_ATTENUATION();
    int GL_RED_BITS();
    int GL_RENDERER();
    int GL_REPEAT();
    int GL_REPLACE();
    int GL_RESCALE_NORMAL();
    int GL_RGB();
    int GL_RGBA();
    int GL_SAMPLE_ALPHA_TO_COVERAGE();
    int GL_SAMPLE_ALPHA_TO_ONE();
    int GL_SAMPLE_COVERAGE();
    int GL_SCISSOR_TEST();
    int GL_SET();
    int GL_SHININESS();
    int GL_SHORT();
    int GL_SMOOTH();
    int GL_SMOOTH_LINE_WIDTH_RANGE();
    int GL_SMOOTH_POINT_SIZE_RANGE();
    int GL_SPECULAR();
    int GL_SPOT_CUTOFF();
    int GL_SPOT_DIRECTION();
    int GL_SPOT_EXPONENT();
    int GL_SRC_ALPHA();
    int GL_SRC_ALPHA_SATURATE();
    int GL_SRC_COLOR();
    int GL_STACK_OVERFLOW();
    int GL_STACK_UNDERFLOW();
    int GL_STENCIL_BITS();
    int GL_STENCIL_BUFFER_BIT();
    int GL_STENCIL_TEST();
    int GL_SUBPIXEL_BITS();
    int GL_TEXTURE();
    int GL_TEXTURE_2D();
    int GL_TEXTURE_COORD_ARRAY();
    int GL_TEXTURE_ENV();
    int GL_TEXTURE_ENV_COLOR();
    int GL_TEXTURE_ENV_MODE();
    int GL_TEXTURE_MAG_FILTER();
    int GL_TEXTURE_MIN_FILTER();
    int GL_TEXTURE_WRAP_S();
    int GL_TEXTURE_WRAP_T();
    int GL_TEXTURE0();
    int GL_TEXTURE1();
    int GL_TEXTURE2();
    int GL_TEXTURE3();
    int GL_TEXTURE4();
    int GL_TEXTURE5();
    int GL_TEXTURE6();
    int GL_TEXTURE7();
    int GL_TEXTURE8();
    int GL_TEXTURE9();
    int GL_TEXTURE10();
    int GL_TEXTURE11();
    int GL_TEXTURE12();
    int GL_TEXTURE13();
    int GL_TEXTURE14();
    int GL_TEXTURE15();
    int GL_TEXTURE16();
    int GL_TEXTURE17();
    int GL_TEXTURE18();
    int GL_TEXTURE19();
    int GL_TEXTURE20();
    int GL_TEXTURE21();
    int GL_TEXTURE22();
    int GL_TEXTURE23();
    int GL_TEXTURE24();
    int GL_TEXTURE25();
    int GL_TEXTURE26();
    int GL_TEXTURE27();
    int GL_TEXTURE28();
    int GL_TEXTURE29();
    int GL_TEXTURE30();
    int GL_TEXTURE31();
    int GL_TRIANGLE_FAN();
    int GL_TRIANGLE_STRIP();
    int GL_TRIANGLES();
    int GL_TRUE();
    int GL_UNPACK_ALIGNMENT();
    int GL_UNSIGNED_BYTE();
    int GL_UNSIGNED_SHORT();
    int GL_UNSIGNED_SHORT_4_4_4_4();
    int GL_UNSIGNED_SHORT_5_5_5_1();
    int GL_UNSIGNED_SHORT_5_6_5();
    int GL_VENDOR();
    int GL_VERSION();
    int GL_VERTEX_ARRAY();
    int GL_XOR();
    int GL_ZERO();
    
    GLESU getGLU();
}
